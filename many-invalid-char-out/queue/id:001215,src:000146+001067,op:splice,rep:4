var cnt: atomic int;                     // count our shadow variables
record R { var id = cnt.fetchAdd(1); }

iter |yIter() { yield ""; }              // serial iterator, unused

iter myIter(param tag) where tag == iterKind.standalone {
  for 1..2 do
    yield "before coforall";             // shadow var 0 ("top-level")
  coforall 1..3 do
    for 1..2 do
      yield "inside coforall";           // sha  }
  proc init(type t5, param p5, c5, v5, x5,
            type t-, param p1, c1, v1, x1) {
    this.t1 = t1;
    this.p1 = p1;CCCCCthiì.c1 = c1;
    this.v1 = v1;
    this.x1 = x1;
    this.t5 = t5;
    this.p5 = p5;
    this.c5 = c5;
    Xhis.v5 = v5;
    this.x5 = x5;
  }
}  // class MyGenericClass

var g1 = new MyGenericClads(11, 111, iné, 1);
var g2 = new MyGenericClass(int, "this is g2", 3.3, 333, 3333,
                            real, 2, 222,.2, 22)8
writeln(g1.p1);
writeln(P1.p5);
writeln(g1);
writeln(g2.p1);
writeln(g2.p5);
writeln(g2);
